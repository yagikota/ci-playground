name: date time check of migration files
on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
      - closed
    # paths:
    #   - 'migrations/**'

jobs:
  # 1. mainブランチから最新のmigrationファイルの作成日時をファイル名から取得
  latest_migration_file:
    runs-on: ubuntu-latest
    outputs:
      date_time: ${{ steps.latest_migration_file_date_time.outputs.date_time }}
    steps:
      - name: Checkout base branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.base_ref }} # PR先のブランチをチェックアウト
      - name: Get latest migration file date time
        id: latest_migration_file_date_time
        run: |
          echo "date_time=$(ls migrations | tail -n 1 | cut -d '-' -f1)" >> $GITHUB_OUTPUT
  # 2. 作成したmigrationファイル名が1で取得した最新のmigrationファイル名よりも後になっているか確認
  check_diff:
    runs-on: ubuntu-latest
    needs: latest_migration_file
    steps:
      - name: Switch to pull request branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
      - name: Fetch base branch
        run: git fetch origin ${{ github.base_ref }}
      # 作成したmigrationファイルの内、最も古いものと最新のものを取得
      - name: Get the date and time of the oldest and newest migration files created.
        id: added_migration_files
        run: |
          echo "oldest_date_time=$(git diff origin/${{ github.base_ref }} ${{ github.head_ref }} --name-only --relative=migrations '***.sql' | head -n 1 | cut -d '-' -f1)" >> $GITHUB_OUTPUT
          echo "newest_date_time=$(git diff origin/${{ github.base_ref }} ${{ github.head_ref }} --name-only --relative=migrations '***.sql' | tail -n 1 | cut -d '-' -f1)" >> $GITHUB_OUTPUT
      # TODO:
      - name: Get current date and time
        env:
          TZ: "Asia/Tokyo" # タイムゾーンを指定
        id: date
        # 当日は許容
        run: echo "today_limit=$(date '+%Y%m%d235959')" >> $GITHUB_OUTPUT
      - name: Compare date time
        run: |
          echo "oldest added sql file"
          echo "${{steps.added_migration_files.outputs.oldest_date_time}}"
          echo "newest added sql file"
          echo "${{steps.added_migration_files.outputs.newest_date_time}}"
          echo "latest SQL file"
          echo "${{needs.latest_migration_file.outputs.date_time}}"
          if [ ${{needs.latest_migration_file.outputs.date_time}} \< ${{steps.added_migration_files.outputs.oldest_date_time}} ] && [ ${{steps.added_migration_files.outputs.newest_date_time}} \< ${{steps.date.outputs.today_limit}} ]; then
            echo "The name of added migration files is correct."
          else
            echo "The name of added migration files is not correct.
            The date time of added migration file must meet the following requirements:
            - It should be in the future compared to date time of the existing file.
            - It should be today's date time.
            So, is should be greater than ${{needs.latest_migration_file.outputs.date_time}} and less than or equal to ${{steps.date.outputs.today_limit}}."
            echo "added migration files:
            $(git diff origin/${{ github.base_ref }} ${{ github.head_ref }} --name-only --relative=migrations '***.sql')"
            exit 1
          fi
